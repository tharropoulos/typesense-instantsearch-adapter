{"version":3,"file":"SearchRequestAdapter.js","names":["_interopRequireDefault","require","Object","defineProperty","exports","value","SearchRequestAdapter","_regenerator","_objectWithoutProperties2","_asyncToGenerator2","_defineProperty2","_slicedToArray2","_classCallCheck2","_createClass2","_excluded","ownKeys","e","r","t","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","getOwnPropertyDescriptors","defineProperties","instantsearchRequests","typesenseClient","configuration","additionalSearchParameters","collectionSpecificSearchParameters","key","_shouldUseExactMatchForField","fieldName","collectionName","_this$configuration$c","_this$configuration$f","collectionSpecificFilterByOptions","exactMatch","filterByOptions","_adaptFacetFilters","facetFilters","_this","adaptedResult","transformedTypesenseFilters","map","item","Array","isArray","intermediateFacetFilters","facetFilter","_this$_parseFacetFilt","_parseFacetFilter","fieldValue","console","error","concat","join","fieldValues","_fieldValues$reduce","reduce","result","startsWith","_isNumber","substring","_fieldValues$reduce2","excludedFieldValues","includedFieldValues","typesenseFilterStringComponents","operator","v","_escapeFacetValue","typesenseFilterString","f","_this$_parseFacetFilt2","_this$configuration$f2","filterStringMatchingRegex","facetFilterMatches","facetableFieldsWithSpecialCharacters","sanitizedFacetableFieldsWithSpecialCharacters","flat","replace","RegExp","match","constructor","DEFAULT_FACET_FILTER_STRING_MATCHING_REGEX","Number","isInteger","_adaptNumericFilters","numericFilters","_this2","filtersHash","_this2$_parseNumericF","_parseNumericFilter","adaptedFilters","field","warn","JSON","stringify","numericFilter","_this$configuration$f3","numericFilterMatches","_numericFilterMatches","_numericFilterMatches2","DEFAULT_NUMERIC_FILTER_STRING_MATCHING_REGEX","_numericFilterMatches3","_numericFilterMatches4","_adaptGeoFilter","_ref","insideBoundingBox","aroundRadius","aroundLatLng","insidePolygon","x1","y1","x2","y2","_insideBoundingBox$fl","_insideBoundingBox$fl2","_insideBoundingBox$sp","split","_insideBoundingBox$sp2","geoLocationField","Error","adaptedAroundRadius","parseFloat","coordinates","_adaptFilters","instantsearchParams","filters","_adaptIndexName","indexName","INDEX_NAME_MATCHING_REGEX","_adaptSortBy","_adaptFacetBy","facets","_this3","facet","_this3$configuration$","collectionSpecificFacetByOptions","facetByOptions","_buildSearchParameters","instantsearchRequest","_this4","_this$configuration$c2","_this$configuration$s","params","adaptedCollectionName","snakeCasedAdditionalSearchParameters","entries","_ref2","_ref3","_camelToSnakeCase","typesenseSearchParams","assign","adaptedSortBy","collection","q","query","undefined","facet_by","filter_by","sort_by","max_facet_values","maxValuesPerFacet","page","hitsPerPage","per_page","facetQuery","facet_query","facetName","typesenseVectorQuery","vector_query","sortByOption","collectionSpecificSortByOptions","sortByOptions","fromEntries","_ref4","_ref5","_","str","toLowerCase","_request","mark","_callee","_this5","_searches$","_searches$2","searches","commonParams","_searches$3","conversation","conversation_id","conversation_model_id","wrap","_callee$","_context","prev","next","searchParams","modifiedSearchParams","abrupt","multiSearch","perform","stop","request","get"],"sources":["../src/SearchRequestAdapter.js"],"sourcesContent":["\"use strict\";\n\nexport class SearchRequestAdapter {\n  static get INDEX_NAME_MATCHING_REGEX() {\n    return new RegExp(\"^(.+?)(?=(/sort/(.*))|$)\");\n  }\n\n  static get DEFAULT_FACET_FILTER_STRING_MATCHING_REGEX() {\n    return new RegExp(\"(.*)((?!:).):(?!:)(.*)\");\n  }\n\n  static get DEFAULT_NUMERIC_FILTER_STRING_MATCHING_REGEX() {\n    return new RegExp(\"(.*?)(<=|>=|>|<|=)(.*)\");\n  }\n\n  constructor(instantsearchRequests, typesenseClient, configuration) {\n    this.instantsearchRequests = instantsearchRequests;\n    this.typesenseClient = typesenseClient;\n    this.configuration = configuration;\n    this.additionalSearchParameters = configuration.additionalSearchParameters;\n    this.collectionSpecificSearchParameters = configuration.collectionSpecificSearchParameters;\n  }\n\n  _shouldUseExactMatchForField(fieldName, collectionName) {\n    if (\n      this.configuration.collectionSpecificFilterByOptions?.[collectionName]?.[fieldName]?.exactMatch === false ||\n      this.configuration.filterByOptions?.[fieldName]?.exactMatch === false\n    ) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  _adaptFacetFilters(facetFilters, collectionName) {\n    let adaptedResult = \"\";\n\n    if (!facetFilters) {\n      return adaptedResult;\n    }\n\n    /**\n     * Need to transform:\n     *  facetFilters = [[\"field1:value1\", \"field1:value2\"], \"field2:value3\", \"field2:value4\"]\n     *\n     * Into this:\n     *  field1:=[value1,value2] && field2:=value3 && field2:=value4\n     *\n     * Steps:\n     *  - For each item in facetFilters\n     *    - If item is array\n     *      - OR values together.\n     *      - Warn if field names are not the same\n     *    - If item is string, convert to facet:=value format\n     *  - Join strings by &&\n     */\n\n    const transformedTypesenseFilters = facetFilters.map((item) => {\n      if (Array.isArray(item)) {\n        // Need to transform:\n        // facetFilters = [\"field1:value1\", \"field1:value2\", \"facetN:valueN\"]\n        //\n        // Into this:\n        // intermediateFacetFilters = {\n        //     \"field1\": [\"value1\", \"value2\"],\n        //     \"fieldN\": [\"valueN\"]\n        // }\n\n        const intermediateFacetFilters = {};\n        item.forEach((facetFilter) => {\n          const { fieldName, fieldValue } = this._parseFacetFilter(facetFilter);\n          intermediateFacetFilters[fieldName] = intermediateFacetFilters[fieldName] || [];\n          intermediateFacetFilters[fieldName].push(fieldValue);\n        });\n\n        if (Object.keys(intermediateFacetFilters).length > 1) {\n          console.error(\n            `[Typesense-Instantsearch-Adapter] Typesense does not support cross-field ORs at the moment. The adapter could not OR values between these fields: ${Object.keys(\n              intermediateFacetFilters,\n            ).join(\",\")}`,\n          );\n        }\n\n        // Pick first value from intermediateFacetFilters\n        const fieldName = Object.keys(intermediateFacetFilters)[0];\n        const fieldValues = intermediateFacetFilters[fieldName];\n\n        // Need to transform:\n        // intermediateFacetFilters = {\n        //     \"field1\": [\"value1\", \"value2\"],\n        // }\n        //\n        // Into this:\n        // field1:=[value1,value2]\n\n        // Partition values into included and excluded values\n        const [excludedFieldValues, includedFieldValues] = fieldValues.reduce(\n          (result, fieldValue) => {\n            if (fieldValue.startsWith(\"-\") && !this._isNumber(fieldValue)) {\n              result[0].push(fieldValue.substring(1));\n            } else {\n              result[1].push(fieldValue);\n            }\n            return result;\n          },\n          [[], []],\n        );\n\n        const typesenseFilterStringComponents = [];\n        if (includedFieldValues.length > 0) {\n          const operator = this._shouldUseExactMatchForField(fieldName, collectionName) ? \":=\" : \":\";\n          typesenseFilterStringComponents.push(\n            `${fieldName}${operator}[${includedFieldValues.map((v) => this._escapeFacetValue(v)).join(\",\")}]`,\n          );\n        }\n        if (excludedFieldValues.length > 0) {\n          const operator = this._shouldUseExactMatchForField(fieldName, collectionName) ? \":!=\" : \":!\";\n          typesenseFilterStringComponents.push(\n            `${fieldName}${operator}[${excludedFieldValues.map((v) => this._escapeFacetValue(v)).join(\",\")}]`,\n          );\n        }\n\n        const typesenseFilterString = typesenseFilterStringComponents.filter((f) => f).join(\" && \");\n\n        return typesenseFilterString;\n      } else {\n        // Need to transform:\n        //  fieldName:fieldValue\n        // Into\n        //  fieldName:=fieldValue\n\n        const { fieldName, fieldValue } = this._parseFacetFilter(item);\n        let typesenseFilterString;\n        if (fieldValue.startsWith(\"-\") && !this._isNumber(fieldValue)) {\n          const operator = this._shouldUseExactMatchForField(fieldName, collectionName) ? \":!=\" : \":!\";\n          typesenseFilterString = `${fieldName}${operator}[${this._escapeFacetValue(fieldValue.substring(1))}]`;\n        } else {\n          const operator = this._shouldUseExactMatchForField(fieldName, collectionName) ? \":=\" : \":\";\n          typesenseFilterString = `${fieldName}${operator}[${this._escapeFacetValue(fieldValue)}]`;\n        }\n\n        return typesenseFilterString;\n      }\n    });\n\n    adaptedResult = transformedTypesenseFilters.join(\" && \");\n    // console.log(`${JSON.stringify(facetFilters)} => ${adaptedResult}`);\n\n    return adaptedResult;\n  }\n\n  _parseFacetFilter(facetFilter) {\n    let filterStringMatchingRegex, facetFilterMatches, fieldName, fieldValue;\n\n    // This is helpful when the filter looks like `facetName:with:colons:facetValue:with:colons` and the default regex above parses the filter as `facetName:with:colons:facetValue:with` and `colon`.\n    // So if a facetValue can contain a colon, we ask users to pass in all possible facetable fields in `facetableFieldsWithSpecialCharacters` when instantiating the adapter, so we can explicitly match against that.\n    if (this.configuration.facetableFieldsWithSpecialCharacters?.length > 0) {\n      // escape any Regex special characters, source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#escaping\n      const sanitizedFacetableFieldsWithSpecialCharacters = this.configuration.facetableFieldsWithSpecialCharacters\n        .flat()\n        .map((f) => f.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\"));\n      filterStringMatchingRegex = new RegExp(`^(${sanitizedFacetableFieldsWithSpecialCharacters.join(\"|\")}):(.*)$`);\n      facetFilterMatches = facetFilter.match(filterStringMatchingRegex);\n\n      if (facetFilterMatches != null) {\n        fieldName = `${facetFilterMatches[1]}`;\n        fieldValue = `${facetFilterMatches[2]}`;\n\n        return {\n          fieldName,\n          fieldValue,\n        };\n      }\n    }\n\n    // If we haven't found any matches yet\n    // Use the default filter parsing regex, which assumes that only facet names have colons, and not facet values\n    filterStringMatchingRegex = this.constructor.DEFAULT_FACET_FILTER_STRING_MATCHING_REGEX;\n    facetFilterMatches = facetFilter.match(filterStringMatchingRegex);\n\n    // console.log(filterStringMatchingRegex);\n    // console.log(facetFilter);\n    // console.log(facetFilterMatches);\n\n    if (facetFilterMatches == null) {\n      console.error(\n        `[Typesense-Instantsearch-Adapter] Parsing failed for a facet filter \\`${facetFilter}\\` with the Regex \\`${filterStringMatchingRegex}\\`. If you have field names with special characters, be sure to add them to a parameter called \\`facetableFieldsWithSpecialCharacters\\` when instantiating the adapter.`,\n      );\n    } else {\n      fieldName = `${facetFilterMatches[1]}${facetFilterMatches[2]}`;\n      fieldValue = `${facetFilterMatches[3]}`;\n    }\n\n    return {\n      fieldName,\n      fieldValue,\n    };\n  }\n\n  _escapeFacetValue(value) {\n    // Don't escape booleans, integers or floats\n    if (typeof value === \"boolean\" || value === \"true\" || value === \"false\" || this._isNumber(value)) {\n      return value;\n    }\n    return `\\`${value}\\``;\n  }\n\n  _isNumber(value) {\n    return (\n      Number.isInteger(value % 1) || // Mod 1 will automatically try converting string values to integer/float\n      !!(value % 1)\n    ); // Is Float\n  }\n\n  _adaptNumericFilters(numericFilters) {\n    // Need to transform this:\n    // [\"field1<=634\", \"field1>=289\", \"field2<=5\", \"field3>=3\"]\n    // to:\n    // \"field1:=[634..289] && field2:<=5 && field3:>=3\"\n    let adaptedResult = \"\";\n\n    if (!numericFilters) {\n      return adaptedResult;\n    }\n\n    // Transform to intermediate structure:\n    // {\n    //   field1: {\n    //     \"<=\": 634,\n    //     \">=\": 289\n    //   },\n    //   field2: {\n    //     \"<=\": 5\n    //   },\n    //   field3: {\n    //     \">=\": 3\n    //   }\n    // };\n    const filtersHash = {};\n    numericFilters.forEach((filter) => {\n      const { fieldName, operator, fieldValue } = this._parseNumericFilter(filter);\n      filtersHash[fieldName] = filtersHash[fieldName] || {};\n      filtersHash[fieldName][operator] = fieldValue;\n    });\n\n    // Transform that to:\n    //  \"field1:=[634..289] && field2:<=5 && field3:>=3\"\n    const adaptedFilters = [];\n    Object.keys(filtersHash).forEach((field) => {\n      if (filtersHash[field][\"<=\"] != null && filtersHash[field][\">=\"] != null) {\n        adaptedFilters.push(`${field}:=[${filtersHash[field][\">=\"]}..${filtersHash[field][\"<=\"]}]`);\n      } else if (filtersHash[field][\"<=\"] != null) {\n        adaptedFilters.push(`${field}:<=${filtersHash[field][\"<=\"]}`);\n      } else if (filtersHash[field][\">=\"] != null) {\n        adaptedFilters.push(`${field}:>=${filtersHash[field][\">=\"]}`);\n      } else if (filtersHash[field][\"=\"] != null) {\n        adaptedFilters.push(`${field}:=${filtersHash[field][\"=\"]}`);\n      } else {\n        console.warn(\n          `[Typesense-Instantsearch-Adapter] Unsupported operator found ${JSON.stringify(filtersHash[field])}`,\n        );\n      }\n    });\n\n    adaptedResult = adaptedFilters.join(\" && \");\n    return adaptedResult;\n  }\n\n  _parseNumericFilter(numericFilter) {\n    let filterStringMatchingRegex, numericFilterMatches;\n    let fieldName, operator, fieldValue;\n\n    // The following is helpful when the facetName has special characters like > and the default regex fails to parse it properly.\n    // So we ask users to pass in facetable fields in `facetableFieldsWithSpecialCharactersWithSpecialCharacters` when instantiating the adapter, so we can explicitly match against that.\n    if (this.configuration.facetableFieldsWithSpecialCharacters?.length > 0) {\n      // escape any Regex special characters, source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#escaping\n      const sanitizedFacetableFieldsWithSpecialCharacters = this.configuration.facetableFieldsWithSpecialCharacters.map(\n        (f) => f.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\"),\n      );\n      filterStringMatchingRegex = new RegExp(\n        `^(${sanitizedFacetableFieldsWithSpecialCharacters.join(\"|\")})(<=|>=|>|<|=)(.*)$`,\n      );\n\n      numericFilterMatches = numericFilter.match(filterStringMatchingRegex);\n\n      if (numericFilterMatches != null) {\n        // If no matches are found or if the above didn't trigger, fall back to the default regex\n        [, fieldName, operator, fieldValue] = numericFilterMatches;\n        return {\n          fieldName,\n          operator,\n          fieldValue,\n        };\n      }\n    }\n\n    // If we haven't found any matches yet, fall back to the default regex\n    filterStringMatchingRegex = this.constructor.DEFAULT_NUMERIC_FILTER_STRING_MATCHING_REGEX;\n    numericFilterMatches = numericFilter.match(filterStringMatchingRegex);\n\n    // console.log(filterStringMatchingRegex);\n    // console.log(numericFilter);\n    // console.log(numericFilterMatches);\n\n    if (numericFilterMatches == null) {\n      console.error(\n        `[Typesense-Instantsearch-Adapter] Parsing failed for a numeric filter \\`${numericFilter}\\` with the Regex \\`${filterStringMatchingRegex}\\`. If you have field names with special characters, be sure to add them to a parameter called \\`facetableFieldsWithSpecialCharacters\\` when instantiating the adapter.`,\n      );\n    } else {\n      [, fieldName, operator, fieldValue] = numericFilterMatches;\n    }\n\n    return {\n      fieldName,\n      operator,\n      fieldValue,\n    };\n  }\n\n  _adaptGeoFilter({ insideBoundingBox, aroundRadius, aroundLatLng, insidePolygon }) {\n    // Give this parameter first priority if it exists, since\n    if (insideBoundingBox) {\n      let x1, y1, x2, y2;\n      if (Array.isArray(insideBoundingBox)) {\n        [x1, y1, x2, y2] = insideBoundingBox.flat();\n      } else {\n        [x1, y1, x2, y2] = insideBoundingBox.split(\",\");\n      }\n      return `${this.configuration.geoLocationField}:(${x1}, ${y1}, ${x1}, ${y2}, ${x2}, ${y2}, ${x2}, ${y1})`;\n    }\n\n    if (aroundLatLng || aroundRadius) {\n      if (!aroundRadius || aroundRadius === \"all\") {\n        throw new Error(\n          \"[Typesense-Instantsearch-Adapter] In Typesense, geo-filtering around a lat/lng also requires a numerical radius. \" +\n            \"So the `aroundRadius` parameter is required when `aroundLatLng` is used. \" +\n            \"If you intend to just geo-sort around a lat/long, you want to use the sortBy InstantSearch widget (or a virtual sortBy custom widget).\",\n        );\n      }\n      const adaptedAroundRadius = `${parseFloat(aroundRadius) / 1000} km`; // aroundRadius is in meters\n      return `${this.configuration.geoLocationField}:(${aroundLatLng}, ${adaptedAroundRadius})`;\n    }\n\n    if (insidePolygon) {\n      let coordinates = insidePolygon;\n      if (Array.isArray(insidePolygon)) {\n        coordinates = insidePolygon.flat().join(\",\");\n      }\n      return `${this.configuration.geoLocationField}:(${coordinates})`;\n    }\n  }\n\n  _adaptFilters(instantsearchParams, collectionName) {\n    const adaptedFilters = [];\n\n    // `filters` can be used with the `Configure` widget\n    // However the format needs to be in the Typesense filter_by format, instead of Algolia filter format.\n    if (instantsearchParams.filters) {\n      adaptedFilters.push(instantsearchParams.filters);\n    }\n    adaptedFilters.push(this._adaptFacetFilters(instantsearchParams.facetFilters, collectionName));\n    adaptedFilters.push(this._adaptNumericFilters(instantsearchParams.numericFilters));\n    adaptedFilters.push(this._adaptGeoFilter(instantsearchParams));\n\n    return adaptedFilters.filter((filter) => filter && filter !== \"\").join(\" && \");\n  }\n\n  _adaptIndexName(indexName) {\n    return indexName.match(this.constructor.INDEX_NAME_MATCHING_REGEX)[1];\n  }\n\n  _adaptSortBy(indexName) {\n    return indexName.match(this.constructor.INDEX_NAME_MATCHING_REGEX)[3];\n  }\n\n  _adaptFacetBy(facets, collectionName) {\n    return [facets]\n      .flat()\n      .map((facet) => {\n        if (this.configuration.collectionSpecificFacetByOptions?.[collectionName]?.[facet]) {\n          return `${facet}${this.configuration.collectionSpecificFacetByOptions[collectionName][facet]}`;\n        } else if (this.configuration.facetByOptions[facet]) {\n          return `${facet}${this.configuration.facetByOptions[facet]}`;\n        } else {\n          return facet;\n        }\n      })\n      .join(\",\");\n  }\n\n  _buildSearchParameters(instantsearchRequest) {\n    const params = instantsearchRequest.params;\n    const indexName = instantsearchRequest.indexName;\n    const adaptedCollectionName = this._adaptIndexName(indexName);\n\n    // Convert all common parameters to snake case\n    const snakeCasedAdditionalSearchParameters = Object.entries({\n      ...this.additionalSearchParameters,\n      ...(this.collectionSpecificSearchParameters[adaptedCollectionName] || {}),\n    }).reduce((result, [key, value]) => {\n      result[this._camelToSnakeCase(key)] = Array.isArray(value) ? value.join(\",\") : value;\n      return result;\n    }, {});\n\n    const typesenseSearchParams = Object.assign({}, snakeCasedAdditionalSearchParameters);\n\n    const adaptedSortBy = this._adaptSortBy(indexName);\n\n    Object.assign(typesenseSearchParams, {\n      collection: adaptedCollectionName,\n      q: params.query === \"\" || params.query === undefined ? \"*\" : params.query,\n      facet_by:\n        snakeCasedAdditionalSearchParameters.facet_by || this._adaptFacetBy(params.facets, adaptedCollectionName),\n      filter_by: this._adaptFilters(params, adaptedCollectionName) || snakeCasedAdditionalSearchParameters.filter_by,\n      sort_by: adaptedSortBy || snakeCasedAdditionalSearchParameters.sort_by,\n      max_facet_values: params.maxValuesPerFacet,\n      page: (params.page || 0) + 1,\n    });\n\n    if (params.hitsPerPage) {\n      typesenseSearchParams.per_page = params.hitsPerPage;\n    }\n\n    if (params.facetQuery) {\n      typesenseSearchParams.facet_query = `${params.facetName}:${params.facetQuery}`;\n      typesenseSearchParams.per_page = 0;\n    }\n\n    // If a custom vector query is specified, set q=*\n    if (params.typesenseVectorQuery) {\n      typesenseSearchParams.vector_query = params.typesenseVectorQuery;\n    }\n\n    // Allow for conditional disabling of overrides, for particular sort orders\n    const sortByOption =\n      this.configuration.collectionSpecificSortByOptions?.[adaptedCollectionName]?.[typesenseSearchParams[\"sort_by\"]] ||\n      this.configuration.sortByOptions?.[typesenseSearchParams[\"sort_by\"]];\n    if (sortByOption?.[\"enable_overrides\"] != null) {\n      typesenseSearchParams[\"enable_overrides\"] = sortByOption[\"enable_overrides\"];\n    }\n\n    // console.log(params);\n    // console.log(typesenseSearchParams);\n\n    // Filter out empty or null values, so we don't accidentally override values set in presets\n    // eslint-disable-next-line no-unused-vars\n    return Object.fromEntries(Object.entries(typesenseSearchParams).filter(([_, v]) => v != null && v !== \"\"));\n  }\n\n  _camelToSnakeCase(str) {\n    return str\n      .split(/(?=[A-Z])/)\n      .join(\"_\")\n      .toLowerCase();\n  }\n\n  async request() {\n    // console.log(this.instantsearchRequests);\n\n    let searches = this.instantsearchRequests.map((instantsearchRequest) =>\n      this._buildSearchParameters(instantsearchRequest),\n    );\n\n    // If this is a conversational search, then move conversation related params to query params\n    let commonParams = {};\n    if (searches[0]?.conversation === true || searches[0]?.conversation === \"true\") {\n      const { q, conversation, conversation_id, conversation_model_id } = searches[0];\n      commonParams = { q, conversation, conversation_id, conversation_model_id };\n\n      searches = searches.map((searchParams) => {\n        // eslint-disable-next-line no-unused-vars\n        const { q, conversation, conversation_id, conversation_model_id, ...modifiedSearchParams } = searchParams;\n        return modifiedSearchParams;\n      });\n    }\n\n    return this.typesenseClient.multiSearch.perform({ searches: searches }, commonParams);\n  }\n}\n"],"mappings":"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","ignoreList":[]}